Postgres-Specific Table Creation:
Example: friends Table:Shows Postgres specific code for defining the fields inside the table.

CREATE TABLE friends (
id SERIAL PRIMARY KEY,              : Automatically incrementing integer, unique identifier
name VARCHAR(50),                   : Variable-length string limited to 50 characters.
age INT,                            : Integer for whole numbers only.
is_cool BOOLEAN                     : True or false value.
);                                  Closes off table creation


Postgres Data Types - Detailed

VARCHAR(n): Efficient storage as it only uses space required by the actual data.
CHAR(n): Fixed-length character string. Allocates n characters regardless of actual data size.
TEXT: Flexible-length string (no fixed size limit). Modern practice has seen that it doesn't take much more space than VARCHAR, but with less of a concern for future data sizes
INT: Stores whole numbers.
BOOLEAN: Stores true/false or binary values.

Other Postgres Data Types:
BIGSERIAL: Larger auto-incrementing integer, for when you need more records than SERIAL can offer
CHARACTER VARYING (VARCHAR) : Variable character string
DATE : Stores date values


Creating a pg Client:
const db = new pg.Client({
    user: "postgres"                (default Postgres user).
    host: "localhost"               (default if local database).
    database: "world"               (database name created earlier).
    password: "Password"            for the Postgres user.
    port: 5432                      (default Postgres port).
}); 

Database Connection:
db.connect();                       - Initiates the connection to the Postgres database.

SQL Query:
db.query("SELECT * FROM capitals", (err, res) => {...});
    Executes the SQL query to fetch all data from the capitals table.
    Provides a callback with error and results (res).

Data Handling:
Error Handling: console.log(err);   (if an error occurs).
Data Storage: quiz = res.rows;      - Stores fetched data into a variable named quiz.

Closing Connection:
db.end();                           - Closes the database connection, which is best practice.

Ex.
db.query("SELECT * FROM capitals", (err, res) =>{
  if (err){
    console.error("Error executing query", err.stack);
  } else {
    quiz = res.rows;
  }
  db.end();
});

LIKE Clause (Loose Matching): SELECT column FROM table WHERE column LIKE pattern;
Used for partial or pattern matching.
%: Wildcard character representing zero or more characters.
||: String concatenation operator.

Example: WHERE country LIKE 'United%':
SELECT country 
FROM world_food 
WHERE country LIKE 'U' || '%';

Parameterized Queries:
db.query(sql VALUES ($1, $2), [value1, value2]);
Uses placeholders ($1, $2, etc.) in the SQL statement.

An array provides the values that will replace placeholders in the SQL statement.



relational databases:

One-to-One Relationships:
One record in a table maps to exactly one record in another table
Ex. A student table linked to a contact table via the id field.
CREATE TABLE contact_detail (
  id INT UNIQUE REFERENCES student(id),       - Links to the id (PRIMARY KEY) column in the student table.
  telephone VARCHAR(20),
  address VARCHAR(255)
);
join:
  SELECT * 
  FROM student
  JOIN contact_detail
  ON student.id = contact_detail.id

One-to-Many Relationships:
One record in a table can be associated with multiple records in another table (but the many side can only be associated with one of the one side)
Ex. A student can have many homework submissions.
  Perspective:
    From student to homework: One-to-Many.
    From homework to student: Many-to-One.
Diagram: Illustrates a One-to-Many relationship visually, using a "crow's feet" symbol on the "many" side.
CREATE TABLE homework_submission (
  id SERIAL PRIMARY KEY,
  mark INT,
  student_id INT REFERENCES student(id)       - ets the Foreign Key relationship, linking to the student id in the student table.
);

Many-to-Many Relationships:
Multiple records in one table can be associated with multiple records in another table/tables.
Ex. One student can be enrolled in many classes and One class can have many students.
Intermediate Table: Requires an extra table to represent the relationship itself (linking table).


SQL Aliases:
To give a temporary, shorter name to a table or a column in a SQL statement.
SELECT field AS alias_name FROM table         - Renames a column in a result set.
Ex. 
  SELECT s.id AS id, first_name, last_name, title
  FROM enrollment AS e
  JOIN student AS s ON s.id = e.student_id
  JOIN class AS c ON c.id = e.class_id;


ALTER TABLE Command:
Syntax: ALTER TABLE table_name command;

RENAME TO Command:
ALTER TABLE student RENAME TO user;

ALTER COLUMN Command:
ALTER TABLE table_name ALTER COLUMN column_name TYPE new_data_type;

Adding constraints
ALTER TABLE table_name ADD CONSTRAINT constraint_name 
Ex. ALTER TABLE table_name ADD UNIQUE (column1, column2);


DROP TABLE Command:
Syntax:
  DROP TABLE table_name;
DROP TABLE IF EXISTS:
  DROP TABLE IF EXISTS table_name;


UPDATE Command:
Syntax:
  UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;


ORDER BY Command:
Syntax:
  SELECT * FROM table_name ORDER BY column_name ASC|DESC;
    ASC for ascending order (default).
    DESC for descending order.
  Ex. 
    SELECT * FROM users ORDER BY name DESC;


DELETE FROM Command:
Syntax:
  DELETE FROM table_name WHERE condition;
  Ex. 
    DELETE FROM visited_countries WHERE id = 6;








