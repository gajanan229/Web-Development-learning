"dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.5",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.17.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.16",
    "globals": "^15.14.0",
    "vite": "^6.0.5"
  }

import { createRoot } from "react-dom/client";

const container = document.getElementById("root");
const root = createRoot(container);

---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------

create new react project:
    npm create vite@latest my-react-app --template react
        Select a framework: » React
        Select a variant: » JavaScript
    cd my-react-app
    npm install
    npm run dev

In the index.html there needs to be a div element with an id of "root"
    <div id="root"></div>

to import react:
    import React from "react";

to insert html in the root:
    import { createRoot } from "react-dom/client";

    const container = document.getElementById("root");
    const root = createRoot(container);
    root.render(<div>
        <h1>Hello World</h1>
        <p>This is a paragraph</p>
    </div>);

to use html atributes make the atribute names camel case:
    className="heading" contentEditable="true" spellcheck="false"

In-line CSS:
    style={{color: "red"}}
        it expects properties to be thin the form of js object 

React components:
    function Heading() {
        return (<h1>My Favourite Foods</h1>);
    }
    export default Heading;

    in the index.js:
        import Heading from "./Heading";


export, import and modules:
    export default pi;
    export { doublePi, triplePi };

    import pi, { doublePi, triplePi } from "./math.js";
    or
    import * as pi from "./math.js";
    used like: 
        pi.default
        pi.doublePi()

React Props:
    function Card(props) {
        return (
            <div>
            <h2>{props.name}</h2>
            <p>{props.email}</p>
            </div>
        )
    }

    use in render:
        <Card name="Beyonce" email="b@beyonce.com"/>

mapping components:
    {contacts.map(createCard)}

    function createCard(contact){
            return <Card 
            key={contact.id}
            name={contact.name}
        />
    }   

Maps/Filter/Reduce:
    Map: Create a new array by doing something with each item in an array.
        const newNumbers = numbers.map(function (x) {
            return x * 2;
        });
    
    Filter: Create a new array by keeping the items that return true.
        const newNumbers3 = numbers.filter(function(num) {
            return num < 10;
        });
    
    Reduce: Accumulate a value by doing something to each item in an array.
        var newNumber5 = numbers.reduce(function (accumulator, currentNumber) {
            return accumulator + currentNumber;
        })

    Find: find the first item that matches from an array.

        const newNumber7 = numbers.find(function (num) {
            return num > 10;
        })

    FindIndex: find the index of the first item that matches.

        const newNumber8 = numbers.findIndex(function (num) {
            return num > 10;
        })

Arrow functions:
    numbers.map(x => x * x);
    or
    numbers.map((x, y) => {
        y = y+2
        x * y
    });

Ternary operator, AND operator:
    Ternary operator:
        {Condition ? statement if TRUE : statement if FALSE}
        Ex. 
            {isLoggedIn ? <h1>Hello</h1> : <Login />}

    AND operator:   like ternary operator but only outputs if condition is true
        {Condition && statement if TRUE }
        Ex. 
            {currentTime > 12 && <h1>Why are you still working?</h1>}

React Hooks:
    must be done in react functions 
    const [count, setCount] = useState(0);

Destructuring:
    objects:
        const {PropertyName: aliasIdentifier , PropertyName: aliasIdentifier } = object
        Ex.
            const {coloursByPopularity: cbp, speedStats: ss} = tesla
    
    Arrays:
        const [aliasIdentifier, aliasIdentifier2] = Arrays;
        Ex.
            const [honda, tesla] = cars;

React forms:
    <form onSubmit={handleClick}>

    function handleClick(event){
        setSubmitName(name);
        event.preventDefault();
    }

events:
    const { name, value } = event.target;

spread operator:
    const citrus = ["Lime", "Lemon", "Orange"];
    const fruits = ["Apple", ...citrus, "Banana", "Coconut"];

    const fullName = {
        fName: "James",
        lName: "Bond"
    };
    const user = {
        ...fullName,
        id: 1,
        username: "jamesbond007"
    };














